<?xml version="1.0"?>
<!--
    Mango - Open Source M2M - http://mango.serotoninsoftware.com
    Copyright (C) 2006-2011 Serotonin Software Technologies Inc.
    @author Matthew Lohbihler
    
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see http://www.gnu.org/licenses/.
-->
<project name="Mango" basedir="." default="deploy">

	

	<property file="build.properties"/>
	
    <property name="src.dir" value="src"/>
    <property name="src_gen.dir" value="src_gen"/>
	<property name="web.dir" value="war"/>
	<property name="templates.dir" value="templates"/>
	<property name="build.dir" value="build"/>
	<property name="compile.dir" value="${build.dir}/WEB-INF/classes"/>
	
	<path id="master-classpath">
		<fileset dir="${web.dir}/WEB-INF/lib">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="lib">
			<include name="*.jar"/>
			<include name="**/*.jar"/>
		</fileset>
		<pathelement path="${build.dir}"/>
	</path>

	<path id="test-classpath">
			<fileset dir="${web.dir}/WEB-INF/lib">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="lib">
			<include name="*.jar"/>
			<include name="**/*.jar"/>
		</fileset>
        <pathelement path="${build.dir}/WEB-INF/classes"/>
        <fileset dir="${ant.home}/lib" includes="*.jar" />
    </path>
	
	<target name="clean" description="Clean output directories">
		<mkdir dir="${build.dir}"/>
		<delete>
			<fileset dir="${build.dir}">
				<include name="**/*"/>
			</fileset>
		</delete>
		<mkdir dir="${build.dir}"/>
	</target>
	
	<target name="createConfigFiles">
		<mkdir dir="${build.dir}"/>
		<copy file="${templates.dir}/log4j.xml" todir="${build.dir}/WEB-INF/classes" overwrite="true">
			<filterchain>
				<replacetokens>
					<token key="tomcathome" value="${tomcat.home}"/>
					<token key="logThreshold" value="${log4j.xml.logThreshold}"/>
				</replacetokens>
			</filterchain>
		</copy>
		
		<copy file="${templates.dir}/env.properties" todir="${build.dir}/WEB-INF/classes" overwrite="true">
			<filterchain>
				<replacetokens>
                    <token key="db.type" value="${db.type}"/>
                    <token key="db.url" value="${db.url}"/>
                    <token key="db.username" value="${db.username}"/>
                    <token key="db.password" value="${db.password}"/>
                    <token key="convert.db.type" value="${convert.db.type}"/>
                    <token key="convert.db.url" value="${convert.db.url}"/>
                    <token key="convert.db.username" value="${convert.db.username}"/>
                    <token key="convert.db.password" value="${convert.db.password}"/>
					<token key="grove.url" value="${grove.url}"/>
				</replacetokens>
			</filterchain>
		</copy>
	</target>
	
	<target name="compile" description="Compile main source tree java files">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.dir}/WEB-INF/classes"/>
        <mkdir dir="${build.dir}/test-report"/>
		<javac destdir="${build.dir}/WEB-INF/classes" includeantruntime="false" debug="true" debuglevel="lines,vars,source"
				deprecation="false" optimize="false" failonerror="true">
            <src path="${src.dir}"/>
            <src path="${src_gen.dir}"/>
			<classpath refid="master-classpath"/>
		</javac>

	</target>
	
	<target name="static" description="Copy changed static assets to build directory">
		<mkdir dir="${build.dir}"/>
		<copy todir="${build.dir}" preservelastmodified="true">
			<fileset dir="${web.dir}"><include name="**/*.*"/></fileset>
		</copy>
		<copy todir="${build.dir}/WEB-INF/db" preservelastmodified="true">
            <fileset file="db/createTables-derby.sql"/>
            <fileset file="db/createTables-mysql.sql"/>
            <fileset file="db/createTables-mssql.sql"/>
		</copy>
        <copy file="${build.dir}/WEB-INF/classes/messages_en.properties" tofile="${build.dir}/WEB-INF/classes/messages.properties"/>
	</target>
	
	<target name="build" depends="compile,static" description="Deploy application"/>
	  
	<target name="fullBuild" depends="build,createConfigFiles" />
	
  
<!-- ============================================================== -->
<!-- Tomcat deployment tasks                                        -->
<!-- ============================================================== -->

	<target name="copy" depends="static" description="Copy changed assets to build directory">
		<copy todir="${tomcat.home}/${tomcat.hostname}/${tomcat.appdir}" preservelastmodified="true">
			<fileset dir="${build.dir}"><include name="**/*.*"/></fileset>
		</copy>
	</target>
	
	<target name="deploy" depends="build,copy" description="Compile and copy changed assets to Tomcat"/>
  	<target name="fullDeploy" depends="fullBuild,copy" description="Compile and copy changed assets to Tomcat"/>

<!-- ============================================================== -->
<!-- Distribution build tasks                                       -->
<!-- ============================================================== -->

	<target name="dist" depends="clean,fullBuild" description="Create all distribution assets">
	    <!-- Delete files that should be explicitly excluded -->
	  
        <!-- Overwrite files that should be replaced with stubs -->
        <copy todir="${build.dir}" preservelastmodified="false" overwrite="true">
          <fileset dir="overwrite"><include name="**/*.*"/></fileset>
        </copy>
	  
		<!-- Create the distribution files -->
		<delete file="mango-${version}.zip"/>
		<zip destfile="mango-${version}.zip">
			<fileset dir="${build.dir}"><include name="**/*"/></fileset>
		</zip>
		
		<delete file="mango-${version}.tar.gz"/>
		<tar destfile="mango-${version}.tar" basedir="${build.dir}"/>
		<gzip destfile="mango-${version}.tar.gz" src="mango-${version}.tar"/>
		<delete file="mango-${version}.tar"/>
		
		<!-- Create the upgrade files -->
		<delete>
			<fileset file="${build.dir}/WEB-INF/classes/env.properties"/>
			<fileset file="${build.dir}/WEB-INF/classes/log4j.xml"/>
		</delete>
		
		<delete file="mango-upgrade-${version}.zip"/>
		<zip destfile="mango-upgrade-${version}.zip">
			<fileset dir="${build.dir}"><include name="**/*"/></fileset>
		</zip>
		
		<delete file="mango-upgrade-${version}.tar.gz"/>
		<tar destfile="mango-upgrade-${version}.tar" basedir="${build.dir}"/>
		<gzip destfile="mango-upgrade-${version}.tar.gz" src="mango-upgrade-${version}.tar"/>
		<delete file="mango-upgrade-${version}.tar"/>
	</target>
    
    <target name="dist-source" description="Create a source distribution">
      <mkdir dir="${build.dir}"/>
      <delete dir="${build.dir}"/>
      <mkdir dir="${build.dir}"/>
      
      <copy todir="${build.dir}/${web.dir}" preservelastmodified="true">
          <fileset dir="${web.dir}"><include name="**/*.*"/></fileset>
      </copy>
      <copy todir="${build.dir}/${src.dir}" preservelastmodified="true">
          <fileset dir="${src.dir}"><include name="**/*.*"/></fileset>
      </copy>
      <copy todir="${build.dir}/db" preservelastmodified="true">
          <fileset dir="db"><include name="**/*.*"/></fileset>
      </copy>
      <copy todir="${build.dir}/${templates.dir}" preservelastmodified="true">
          <fileset dir="${templates.dir}"><include name="**/*.*"/></fileset>
      </copy>
      
      <copy file="build.xml" tofile="${build.dir}/build.xml" />
      <copy file="sample-build.properties" tofile="${build.dir}/build.properties"/>
      <copy file=".classpath" tofile="${build.dir}/.classpath"/>
      <copy file=".project" tofile="${build.dir}/.project"/>
      
      <zip destfile="mango-source-${version}.zip">
          <fileset dir="${build.dir}"><include name="**/*"/></fileset>
      </zip>
      
      <delete dir="${build.dir}"/>
    </target>
	
  
<!-- ============================================================== -->
<!-- Tomcat tasks                                                   -->
<!-- ============================================================== -->
	
	<taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask">
		<classpath><path location="${tomcat.home}/lib/catalina-ant.jar"/></classpath>
	</taskdef>
	<taskdef name="list" classname="org.apache.catalina.ant.ListTask">
		<classpath><path location="${tomcat.home}/lib/catalina-ant.jar"/></classpath>
	</taskdef>
	<taskdef name="start" classname="org.apache.catalina.ant.StartTask">
		<classpath><path location="${tomcat.home}/lib/catalina-ant.jar"/></classpath>
	</taskdef>
	<taskdef name="stop" classname="org.apache.catalina.ant.StopTask">
		<classpath><path location="${tomcat.home}/lib/catalina-ant.jar"/></classpath>
	</taskdef>
	
	<target name="reload" description="Reload application in Tomcat">
		<reload url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
				path="${tomcat.apppath}"/>
	</target>
	
	<target name="start" description="Start Tomcat application">
		<start url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
				path="${tomcat.apppath}"/>
	</target>
	
	<target name="stop" description="Stop Tomcat application">
		<stop url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"
				path="${tomcat.apppath}"/>
	</target>
	
	<target name="list" description="List Tomcat applications">
		<list url="${tomcat.manager.url}" username="${tomcat.manager.username}" password="${tomcat.manager.password}"/>
	</target>
  
  
  <!-- ============================================================== -->
  <!-- WSDL to Java code generation                                   -->
  <!-- ============================================================== -->
  
  <!-- WSDL to Java taskdef -->
	<!--
  <taskdef name="axis-wsdl2java" classname="org.apache.axis.tools.ant.wsdl.Wsdl2javaAntTask" loaderref="axis">
    <classpath>
      <fileset dir="lib" includes="*.jar" />
    </classpath>
    <classpath refid="master-classpath"/>
  </taskdef>
	-->
  
  <target name="generate-opc-ws-client-axis">
    <mkdir dir="src_gen" />
    <delete>
      <fileset dir="src_gen" includes="**/*.java"/>
    </delete>
<!--
    <axis-wsdl2java url="docs/wsdl/opcxmlda.wsdl.xml" output="src_gen" serverside="false" skeletonDeploy="false" testcase="true">
      <mapping package="com.serotonin.mango.ws.opc" namespace="http://opcfoundation.org/webservices/XMLDA/1.0/" />
    </axis-wsdl2java>
-->
    <axis-wsdl2java url="docs/wsdl/iLON100.wsdl" output="src_gen" serverside="false" skeletonDeploy="false" testcase="true">
<!--      <mapping package="com.serotonin.mango.ws.ilon" namespace="http://wsdl.echelon.com/web_services_ns/ilon100/v4.0/wsdl/" /> -->
    </axis-wsdl2java>
  </target>


  <!-- ============================================================== -->
  <!-- JUnit tasks				                                      -->
  <!-- ============================================================== -->

      <!-- https://junit.org/junit5/docs/snapshot/user-guide/#running-tests-build-ant -->
    <target name="test.junit.launcher" depends="compile">
        <junitlauncher haltOnFailure="false" printSummary="true">
            <classpath refid="test-classpath"/>
            <testclasses outputdir="${build.dir}/test-report">
                <fileset dir="${build.dir}/test">
                    <include name="**/*Tests.class"/>
                </fileset>
                <listener type="legacy-xml" sendSysOut="true" sendSysErr="true"/>
                <listener type="legacy-plain" sendSysOut="true" />
            </testclasses>
        </junitlauncher>
    </target>

    <!-- https://junit.org/junit5/docs/current/user-guide/#running-tests-console-launcher -->
    <target name="test.console.launcher" depends="compile">
        <java classpathref="test-classpath" classname="org.junit.platform.console.ConsoleLauncher" fork="true" failonerror="true">
            <arg value="--scan-classpath"/>
            <arg line="--reports-dir build/test-report"/>
        </java>
        <junitreport todir="${build.dir}/test-report">
            <fileset dir="${build.dir}/test-report">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build.dir}/test-report/html"/>
        </junitreport>

    </target>

    <target name="test" depends="test.console.launcher" description="Quickly test currently deployed code. Meant for writing test cases."/>
    <target name="fullTest" depends="clean,fullDeploy,reload,test.console.launcher" description="cleans build directory, and reloads Tomcat. Run this if encountering strange errors."/>


</project>